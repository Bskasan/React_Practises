{"ast":null,"code":"var _s = $RefreshSig$();\nimport axios from \"axios\";\nimport { fetchFail, fetchStart, loginSuccess, logoutSuccess, registerSuccess } from \"../features/authSlice\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toastErrorNotify, toastSuccessNotify } from \"../helper/ToastNotify\";\nconst useAuthCall = () => {\n  _s();\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const BASE_URL = \"https://10001.fullstack.clarusway.com/\";\n  const login = async userInfo => {\n    dispatch(fetchStart());\n    try {\n      const {\n        data\n      } = await axios.post(`${BASE_URL}account/auth/login/`, userInfo);\n      dispatch(loginSuccess(data));\n      toastSuccessNotify(\"Login performed\");\n      navigate(\"/stock\");\n      console.log(data);\n    } catch (error) {\n      dispatch(fetchFail());\n      console.log(error);\n    }\n  };\n  const logout = async () => {\n    dispatch(fetchStart());\n    try {\n      await axios.post(`${BASE_URL}account/auth/logout/`);\n      dispatch(logoutSuccess());\n      toastSuccessNotify(\"Logout performed\");\n      navigate(\"/\");\n    } catch (err) {\n      dispatch(fetchFail());\n      toastErrorNotify(\"Logout can not be performed\");\n    }\n  };\n  const register = async userInfo => {\n    dispatch(fetchStart());\n    try {\n      const {\n        data\n      } = await axios.post(`${BASE_URL}account/register/`, userInfo);\n      dispatch(registerSuccess(data));\n      toastSuccessNotify(\"Register performed\");\n      navigate(\"/stock\");\n    } catch (err) {\n      dispatch(fetchFail());\n      toastErrorNotify(\"Register can not be performed\");\n    }\n  };\n  return {\n    login,\n    register,\n    logout\n  };\n};\n_s(useAuthCall, \"R1L93MxeLXzQXESpmjjjQSuQgvM=\", false, function () {\n  return [useDispatch, useNavigate];\n});\nexport default useAuthCall;","map":{"version":3,"names":["axios","fetchFail","fetchStart","loginSuccess","logoutSuccess","registerSuccess","useDispatch","useNavigate","toastErrorNotify","toastSuccessNotify","useAuthCall","_s","dispatch","navigate","BASE_URL","login","userInfo","data","post","console","log","error","logout","err","register"],"sources":["C:/DESKTOP/CLARUSWAY - FULLSTACK/Clarusway/React_Practises/rc23-28_stock-app-v-2/src/hooks/useAuthCall.jsx"],"sourcesContent":["import axios from \"axios\"\r\nimport {\r\n  fetchFail,\r\n  fetchStart,\r\n  loginSuccess,\r\n  logoutSuccess,\r\n  registerSuccess,\r\n} from \"../features/authSlice\"\r\n\r\nimport { useDispatch } from \"react-redux\"\r\nimport { useNavigate } from \"react-router-dom\"\r\nimport { toastErrorNotify, toastSuccessNotify } from \"../helper/ToastNotify\"\r\n\r\nconst useAuthCall = () => {\r\n  const dispatch = useDispatch()\r\n  const navigate = useNavigate()\r\n\r\n  const BASE_URL = \"https://10001.fullstack.clarusway.com/\"\r\n\r\n  const login = async (userInfo) => {\r\n    dispatch(fetchStart())\r\n    try {\r\n      const { data } = await axios.post(\r\n        `${BASE_URL}account/auth/login/`,\r\n        userInfo\r\n      )\r\n      dispatch(loginSuccess(data))\r\n      toastSuccessNotify(\"Login performed\")\r\n      navigate(\"/stock\")\r\n      console.log(data)\r\n    } catch (error) {\r\n      dispatch(fetchFail())\r\n      console.log(error)\r\n    }\r\n  }\r\n\r\n  const logout = async () => {\r\n    dispatch(fetchStart())\r\n    try {\r\n      await axios.post(`${BASE_URL}account/auth/logout/`)\r\n      dispatch(logoutSuccess())\r\n      toastSuccessNotify(\"Logout performed\")\r\n      navigate(\"/\")\r\n    } catch (err) {\r\n      dispatch(fetchFail())\r\n      toastErrorNotify(\"Logout can not be performed\")\r\n    }\r\n  }\r\n\r\n  const register = async (userInfo) => {\r\n    dispatch(fetchStart())\r\n    try {\r\n      const { data } = await axios.post(\r\n        `${BASE_URL}account/register/`,\r\n        userInfo\r\n      )\r\n      dispatch(registerSuccess(data))\r\n      toastSuccessNotify(\"Register performed\")\r\n      navigate(\"/stock\")\r\n    } catch (err) {\r\n      dispatch(fetchFail())\r\n      toastErrorNotify(\"Register can not be performed\")\r\n    }\r\n  }\r\n\r\n  return { login, register, logout }\r\n}\r\n\r\nexport default useAuthCall\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SACEC,SAAS,EACTC,UAAU,EACVC,YAAY,EACZC,aAAa,EACbC,eAAe,QACV,uBAAuB;AAE9B,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,WAAW,QAAQ,kBAAkB;AAC9C,SAASC,gBAAgB,EAAEC,kBAAkB,QAAQ,uBAAuB;AAE5E,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,QAAQ,GAAGN,WAAW,EAAE;EAC9B,MAAMO,QAAQ,GAAGN,WAAW,EAAE;EAE9B,MAAMO,QAAQ,GAAG,wCAAwC;EAEzD,MAAMC,KAAK,GAAG,MAAOC,QAAQ,IAAK;IAChCJ,QAAQ,CAACV,UAAU,EAAE,CAAC;IACtB,IAAI;MACF,MAAM;QAAEe;MAAK,CAAC,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAC9B,GAAEJ,QAAS,qBAAoB,EAChCE,QAAQ,CACT;MACDJ,QAAQ,CAACT,YAAY,CAACc,IAAI,CAAC,CAAC;MAC5BR,kBAAkB,CAAC,iBAAiB,CAAC;MACrCI,QAAQ,CAAC,QAAQ,CAAC;MAClBM,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;IACnB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdT,QAAQ,CAACX,SAAS,EAAE,CAAC;MACrBkB,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACpB;EACF,CAAC;EAED,MAAMC,MAAM,GAAG,MAAAA,CAAA,KAAY;IACzBV,QAAQ,CAACV,UAAU,EAAE,CAAC;IACtB,IAAI;MACF,MAAMF,KAAK,CAACkB,IAAI,CAAE,GAAEJ,QAAS,sBAAqB,CAAC;MACnDF,QAAQ,CAACR,aAAa,EAAE,CAAC;MACzBK,kBAAkB,CAAC,kBAAkB,CAAC;MACtCI,QAAQ,CAAC,GAAG,CAAC;IACf,CAAC,CAAC,OAAOU,GAAG,EAAE;MACZX,QAAQ,CAACX,SAAS,EAAE,CAAC;MACrBO,gBAAgB,CAAC,6BAA6B,CAAC;IACjD;EACF,CAAC;EAED,MAAMgB,QAAQ,GAAG,MAAOR,QAAQ,IAAK;IACnCJ,QAAQ,CAACV,UAAU,EAAE,CAAC;IACtB,IAAI;MACF,MAAM;QAAEe;MAAK,CAAC,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAC9B,GAAEJ,QAAS,mBAAkB,EAC9BE,QAAQ,CACT;MACDJ,QAAQ,CAACP,eAAe,CAACY,IAAI,CAAC,CAAC;MAC/BR,kBAAkB,CAAC,oBAAoB,CAAC;MACxCI,QAAQ,CAAC,QAAQ,CAAC;IACpB,CAAC,CAAC,OAAOU,GAAG,EAAE;MACZX,QAAQ,CAACX,SAAS,EAAE,CAAC;MACrBO,gBAAgB,CAAC,+BAA+B,CAAC;IACnD;EACF,CAAC;EAED,OAAO;IAAEO,KAAK;IAAES,QAAQ;IAAEF;EAAO,CAAC;AACpC,CAAC;AAAAX,EAAA,CArDKD,WAAW;EAAA,QACEJ,WAAW,EACXC,WAAW;AAAA;AAqD9B,eAAeG,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}